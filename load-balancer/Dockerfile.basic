# Stage 1: Build the application
FROM --platform=linux/arm64 rust:latest AS builder
WORKDIR /app

# Copy only the essential files first to optimize caching
COPY Cargo.toml .
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release --target aarch64-unknown-linux-gnu

COPY src src
# RUN touch src/main.rs
RUN cargo build --release --target aarch64-unknown-linux-gnu

RUN strip target/release/load_balancer

FROM gcr.io/distroless/static-debian12:latest AS release
WORKDIR /app
COPY --from=builder /app/target/release/load_balancer .

COPY config.toml .

EXPOSE 4000

CMD ["/app/load_balancer"]


#FROM rust:latest AS builder
#WORKDIR /app
#
## Copy only the essential files first to optimize caching
#COPY Cargo.toml .
#RUN mkdir src && echo "fn main() {}" > src/main.rs
#RUN cargo build --release
#
#COPY src src
## RUN touch src/main.rs
#RUN cargo build --release
#
#RUN strip target/release/load_balancer
#
#FROM gcr.io/distroless/static-debian12:latest AS release
#WORKDIR /app
#COPY --from=builder /app/target/release/load_balancer .
#
#COPY config.toml .
#
#EXPOSE 4000
#
#CMD ["/app/load_balancer"]
